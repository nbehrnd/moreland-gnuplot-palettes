#!/bin/python3

# name:    palette_test_pdf.py
# author:  nbehrnd@yahoo.com
# license: 2019, MIT
# date:    2019-12-06 (YYYY-MM-DD)
# edit:
#
""" Test the already converted Moreland palettes for gnuplot's pdfcairo

    This script asssumes the Moreland palettes of RGB provided as
    floating numbers already converted successfully with csv2plt.py.  It
    tests how these interact with gnuplot's pdfcairo terminal generating
    resolution independent .pdf files.  This is complementary to calling
    the pngcairo terminal offering bitmap .png files.

    To work properly, put this script in the same folder as the converted
    palette .plt files.  Ensure you installed third-party CPython module
    Gnuplot.py (e.g., via pip) in addition to gnuplot itself.  The plots
    generated by gnuplot will be processed further if the following
    programs are accessible from the CLI as well:
    + ghostscript
      The plot initially generated by gnuplot will be in color.  To mimic
      an output constrained to gray scale (e.g., black-and-white printer)
      ghostscript will perform a conversion of the former.  Typically, a
      Linux GUI installation already includes ghostscript.

    + pdfjam
      With pdfjam, the individual plots will be brought into one .pdf in
      common.  It is a wrapper for the pdfpages package (by Andreas
      Matthias) of pdflatex and available for free from

      http://go.warwick.ac.uk/pdfjam

      It equally is deposit in the repositories of e.g., Xubuntu 18.04.
      Contrasting to a montage with ImageMagick, the intermediate .pdf
      output generated still is a true, freely scalable fvector file,
      including for example a searchable text layer and may be processed
      for example in inkscape, too.

    + pdfcrop
      The concatenation provided by pdfjam will fill only a part of the
      page (e.g., ISO A4, or letter, in potrait orientation) with a large
      white frame.  pdfcrop by Heiko Oberdiek will be called to trim this
      white space off.  This CLI-only program was developed in context of
      the LaTeX project and hence available e.g. on www.ctan.org, or in
      Linux GUI installations like Xubuntu.

    The script was written and used successfully on Xubuntu 18.04.3 with
    CPython 3.6.8, gnuplot (5.2.7beta) and Gnuplot.py (1.8); auxilliary
    ghostscript 9.26, pdfjam 2.08, and pdfcrop 1.38. """

import fnmatch
import os
import subprocess as sub
import sys

try:
    import Gnuplot as gp
except IOError:
    print("CPython module 'Gnuplot.py' is not accessible.  Exit.")
    sys.exit(0)


def plt_identification():
    """ Idenitify the .plt to work with. """
    global plt_register
    plt_register = []

    for file in os.listdir("."):
        if fnmatch.fnmatch(file, "*.plt"):
            plt_register.append(file)
    plt_register.sort()


def palette_decomposition():
    """ Display the contributions of R, G, B in RGB and Y in NTSC. """
    print("Querring the channel contributions per palette.")

    for entry in plt_register:
        retain = str(entry)[:-4] + str(".pdf")
        g = gp.Gnuplot(persist=0)

        g('set output "{}"'.format(retain))
        g('set terminal pdfcairo')

        g('load "{}"'.format(entry))
        g('test palette')


# action calls:
plt_identification()
palette_decomposition()
sys.exit(0)
